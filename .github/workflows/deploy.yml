# This workflow is used for automated building of wheels
# and source distributions, and deploys these automatically
# to PyPI.

name: Deploy to PyPI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - cibuildwheel
    # tags:
    #   - "v*"
  # release:
  #   types:
  #     - published

env:
  FORCE_COLOR: 3

jobs:
  # Used for running all wheels in the matrix in parallel.
  # See: https://iscinumpy.dev/post/cibuildwheel-2-10-0/#only-210
  generate-wheels-matrix:
    name: Generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v4
      - name: Install cibuildwheel
        run: pipx install cibuildwheel==2.21.3
      - id: set-matrix
        run: |
          MATRIX=$(
            {
              cibuildwheel --print-build-identifiers --platform linux \
              | jq -nRc '{"only": inputs, "os": "ubuntu-latest"}' \
              && cibuildwheel --print-build-identifiers --platform macos \
              | jq -nRc '{"only": inputs, "os": "macos-13"}' \
              && cibuildwheel --print-build-identifiers --platform macos \
              | jq -nRc '{"only": inputs, "os": "macos-14"}'
            } | jq -sc
          )
          echo "include=$MATRIX" >> $GITHUB_OUTPUT
    env:
      # See: https://cibuildwheel.pypa.io/en/stable/options/#archs
      # Note that macos-13 is an Intel runner, macos-14 is Apple Silicon
      CIBW_ARCHS_LINUX: x86_64 i686
      CIBW_ARCHS_MACOS: native


  build-wheels:
    # Builds all wheels for the supported python versions, architectures and platforms,
    # creating one artifact for each.
    name: Build wheels on ${{ matrix.only }}
    needs: generate-wheels-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-wheels-matrix.outputs.include) }}
        # Essentially contains
        # os: [ubuntu-latest, macos-13, macos-14]
        # from the generate-wheels-matrix job above

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This is needed in order to fetch version tags from git

      - name: Set MACOSX_DEPLOYMENT_TARGET to the current macOS version
        if: ${{ runner.os == 'macOS' }}
        # Needs to be set or delocate will not work.
        # This is due to FFTW being installed through homebrew
        # See:
        # https://cibuildwheel.pypa.io/en/stable/faq/#missing-dependencies
        # https://github.com/pypa/cibuildwheel/discussions/1926
        # https://github.com/pypa/cibuildwheel/issues/563
        run: |
          export MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion | awk -F '.' '{print $1"."0}')
          echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}" >> $GITHUB_ENV

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        with:
            only: ${{ matrix.only }}

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl


  build-sdist:
    # Builds the source distribution and creates an artifact for it.
    name: Build source distribution
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Install dependencies
        run: sudo apt-get install -y libfftw3-dev

      - name: Checkout the project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This is needed in order to fetch version tags from git

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz


  upload-to-pypi:
    # Merges the wheels and sdist and uploads them to PyPI.
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    # environment:
    #   name: pypi
    #   url: https://pypi.org/p/pipic/
    # permissions:
    #   id-token: write
    # if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download wheel and sdist artifacts
        uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/ folder
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish package distributions to PyPI
        # uses: pypa/gh-action-pypi-publish@release/v1
        # with:
        #   # For testing:
        #   repository-url: https://test.pypi.org/legacy/
        #   verbose: true
        #   print-hash: true
        run: echo "Publish here!"
